import mainimport numpy as npimport scipy.stats as statimport matplotlib.pyplot as pltimport scipy.special as spimport timeimport seaborn as snsimport pandas as pdimport mathmn=939.56563hbarc=197.32697cv=1/2+2*0.23ca=0.5me=0.511ga=1.26delt=1.293gf=1.166379e-11 pi=3.141592phi0=4*(gf*me)**2*(hbarc)**2/pidef neutap(e):  # neutral p + v --> p + v    neutap=phi0*((cv-1)**2+3*ga**2*(ca-1)**2)*e**2/(4*me**2)    return neutapdef neutan(e): # neutral n + v --> n + v    neutan=phi0*(1+3*ga**2)*e**2/(16.*me**2)    return neutandef functional(rho,energy,temp,y):    return main.main.anmfp(rho,y,temp,'SLY4','NONE',True,energy)    forcename=['SLY4','BARE','BSK21']temp=np.linspace(0.1,15,num=10)rho=np.logspace(-10,-3,num=10)y=0.6energy=tempstarttime=time.time()n=3 #number of sig figs in the labeltemplabel=['{:g}'.format(float('{:.{p}g}'.format(i, p=n))) for i in temp][::-1]rholabel=['{:g}'.format(float('{:.{p}g}'.format(i, p=n))) for i in rho]rvalheat=np.zeros((temp.shape[0],rho.shape[0]))for it,t in enumerate(temp):    sflux=sp.zeta(3)*3/2*t**3    eavg=(7*t**4*pi**4)/120    avge=eavg/sflux    energy=np.array([0.5,1,1.5,2])*avge    for irho,rh in enumerate(rho):        test=[]        fit_tester=[]        for e in energy:            fit_tester.append(functional(rh,e,t,y)*rh*e**3)        plt.plot(energy,fit_tester)        r2val=stat.linregress(energy,fit_tester)[2]**2        rvalheat[-(it+1),irho]=r2valrvalheat=pd.DataFrame(rvalheat,index=templabel,columns=rholabel)fig=plt.figure(dpi=1200)fig=sns.heatmap(rvalheat,cmap="mako")plt.xlabel('Density ($fm^{-3}$)')plt.ylabel('Temperature (MeV)')plt.title('$R^{2}$ Values for $1/E^{2}$ Dependence')endtime=time.time()plt.savefig('{}y_cmapSLY4'.format(y))plt.tight_layout()print('time taken',endtime-starttime)